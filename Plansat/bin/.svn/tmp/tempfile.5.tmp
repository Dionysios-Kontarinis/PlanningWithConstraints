import java.io.File;
import java.io.FileNotFoundException;
import java.util.Properties;

import org.sat4j.specs.ContradictionException;
import org.sat4j.specs.TimeoutException;

import pddl4j.ErrorManager;
import pddl4j.InvalidExpException;
import pddl4j.PDDLObject;
import pddl4j.Parser;
import pddl4j.ErrorManager.Message;

public class Main_DimacsCNF {

	/**
	 * Display usage.
	 */
	private static void displayUsage() {
		System.out.println("Usage: Main_DimacsCNF [PDDL_DOMAIN] [PDDL_PROBLEM] [MAX_STATE] [Option]");
		System.out.println("  Options:");
		System.out.println("  - t  display the execution time");
		System.exit(0);
	}
	
	public static void displayTime(String s, long time){
		System.out.println("################## "+s+" : "+time+" ms\n");
	}

	public static void main(String[] args) {

		// Get the initial time when the program starts executing.
		long startTimeNano = System.nanoTime();
		long currentTimeNano = System.nanoTime();
		
		// Checks the command line
		if (args.length != 3 && args.length != 4) {
				System.err.println("Invalid command line. "+ args.length);
				Main_DimacsCNF.displayUsage();	
		} else {
			// Creates an instance of the java pddl parser
			Properties pp = Parser.getDefaultOptions();
			Parser parser = new Parser(pp); 

			PDDLObject domain = null;
			//Domain domain = null;

			try {
				File f = new File(args[0]);
				domain = parser.parse(f); 
			} catch (FileNotFoundException e) {
				System.err.println("Domain file not found, please check the file path.");
				Main_DimacsCNF.displayUsage();
			}

			PDDLObject problem = null;
			//Problem problem = null;

			try {
				problem = parser.parse(new File(args[1]));
			} catch (FileNotFoundException e) {
				System.err.println("Problem file not found, please check the file path.");
				Main_DimacsCNF.displayUsage();
			}

			int max_state = 0;

			try {
				max_state = Integer.parseInt(args[2]);
			}catch (NumberFormatException e) {
				System.err.println("Max State should be a valid number.");
				Main_DimacsCNF.displayUsage();
			}

			PDDLObject obj = parser.link(domain, problem);
			// Gets the error manager of the pddl parser
			ErrorManager mgr = parser.getErrorManager();
			// If the parser produces errors we print it and stop
			if (mgr.contains(Message.ERROR)) {
				mgr.print(Message.ALL);
			} // else we print the warnings
			else {
				mgr.print(Message.WARNING);
				System.out.println("\nParsing domain \"" + domain.getDomainName()
						+ "\" done successfully ...");
				System.out.println("Parsing problem \"" + problem.getProblemName()
						+ "\" done successfully ...\n");
			}

			// We want to find a plan consisting of n=2 actions.
			CNF_plugin plugin = new CNF_plugin(obj,max_state);
			
<<<<<<< .mine
	        PDDLObject obj = parser.link(domain, problem);
	        // Gets the error manager of the pddl parser
	        ErrorManager mgr = parser.getErrorManager();
	        // If the parser produces errors we print it and stop
	        if (mgr.contains(Message.ERROR)) {
	            mgr.print(Message.ALL);
	        } // else we print the warnings
	        else {
	            mgr.print(Message.WARNING);
	            System.out.println("\nParsing domain \"" + domain.getDomainName()
	                        + "\" done successfully ...");
	            System.out.println("Parsing problem \"" + problem.getProblemName()
	                        + "\" done successfully ...\n");
	        }
	        
	        // TIME: Print the time used to complete parsing.
			//System.out.println("Time to complete parsing of the problem: " 
			//						+ (System.nanoTime() - currentTimeNano)/1000000 + " ms");
			//currentTimeNano = System.nanoTime();
	        
=======
			if (args.length == 4){
				if (args[3].equalsIgnoreCase("-T")){
					plugin.setDispTime(true);
				}
				else {
					System.err.println("Invalid option.");
					Main_DimacsCNF.displayUsage();
				}
			}
			else {
				plugin.setDispTime(false);
			}
			
			// TIME: Print the time used to complete parsing.
			if (plugin.dispTime){
				Main_DimacsCNF.displayTime("Time to complete parsing of the problem", (System.nanoTime() - currentTimeNano)/1000000);
			}
//			System.out.println("Time to complete parsing of the problem: " 
//					+ (System.nanoTime() - currentTimeNano)/1000000 + " ms");
			currentTimeNano = System.nanoTime();
>>>>>>> .r41
			

			// Find all facts:
			plugin.initFacts();

			// Find all actions:
			try {
				plugin.initOps();
			} catch (InvalidExpException e) {
				e.printStackTrace();
			}

			// Find the goals:
			try {
				///////////////////
				plugin.initializeGoals();
				///////////////////
			} catch (InvalidExpException e1) {
				e1.printStackTrace();
			}

			// TIME: Print the time used to complete initializations. 
<<<<<<< .mine
			//System.out.println("Time to complete initializations of elements: " 
			//						+ (System.nanoTime() - currentTimeNano)/1000000 + " ms");
			//currentTimeNano = System.nanoTime();
=======
			if (plugin.dispTime){
				Main_DimacsCNF.displayTime("Time to complete initializations of elements", (System.nanoTime() - currentTimeNano)/1000000);
			}
//			System.out.println("Time to complete initializations of elements: " 
//					+ (System.nanoTime() - currentTimeNano)/1000000 + " ms");
			currentTimeNano = System.nanoTime();
>>>>>>> .r41


			/*
            // Here we try the solution! (creation of the dimacs file)...
            try {
            	////////////////////////////
				plugin.create_cnf_file();
				////////////////////////////
			} catch (IOException e) {
				e.printStackTrace();
			}
<<<<<<< .mine
			*/
			
			/*
=======
			 */


>>>>>>> .r41
			try {
				plugin.findSolution();
			} catch (ContradictionException e) {
				// Thrown by the solver if it finds out that 2 contradictory clauses have been generated.
				System.out.println();
				System.out.println("%%% THE PROBLEM IS UNSATISFIABLE %%%");
				System.out.println("Contradictory clauses generated...");
				System.out.println();
<<<<<<< .mine
=======
				// TIME: Time used to find out that the problem is unsatisfiable:
				if (plugin.dispTime){
					Main_DimacsCNF.displayTime("Time to find out that the problem is unsatisfiable", (System.nanoTime() - currentTimeNano)/1000000);
				}
//				System.out.println("Time to find out that the problem is unsatisfiable: " 
//						+ (System.nanoTime() - currentTimeNano)/1000000 + " ms");
				currentTimeNano = System.nanoTime();
>>>>>>> .r41
				//TOTAL TIME
				if(plugin.dispTime){
					Main_DimacsCNF.displayTime("TOTAL TIME", (System.nanoTime() - startTimeNano)/1000000);
				}
				System.exit(0);
			} catch (TimeoutException e) {
				// Thrown by the solver if the time given to search for a solution is exceeded.
				System.out.println("%%% THE PROBLEM SEEMS UNSATISFIABLE %%%");
				System.out.println("Sorry but time has ended...");
				System.out.println();
				System.exit(0);
			}
			*/
			/////////////////////////////////////////////
			
			try {
				plugin.encodeActionsSimpleOpSplitting();
			} catch (ContradictionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (TimeoutException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			/////////////////////////////////////////////
			
			
			// TIME: Time used to find the solution:
<<<<<<< .mine
			//System.out.println("Time to to find the solution: " 
			//						+ (System.nanoTime() - currentTimeNano)/1000000 + " ms");
			//currentTimeNano = System.nanoTime();
=======
			if (plugin.dispTime){
				Main_DimacsCNF.displayTime("Time to to find the solution", (System.nanoTime() - currentTimeNano)/1000000);
			}
//			System.out.println("Time to to find the solution: " 
//					+ (System.nanoTime() - currentTimeNano)/1000000 + " ms");
			currentTimeNano = System.nanoTime();
>>>>>>> .r41
			
			//TOTAL TIME
			if(plugin.dispTime){
				Main_DimacsCNF.displayTime("TOTAL TIME", (System.nanoTime() - startTimeNano)/1000000);
			}
		}
	}
}
