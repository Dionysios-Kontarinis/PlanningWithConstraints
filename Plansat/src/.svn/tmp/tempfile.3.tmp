import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Properties;

import org.sat4j.specs.ContradictionException;
import org.sat4j.specs.TimeoutException;

import pddl4j.*;
import pddl4j.ErrorManager.Message;


public class Main_DimacsCNF {

	public static void main(String[] args) {
	     // Checks the command line
	     if (args.length != 2) {
	         System.err.println("Invalid command line");
	     } else {
	         // Creates an instance of the java pddl parser
	    	 Properties pp = Parser.getDefaultOptions();
	    	 Parser parser = new Parser(pp); 
	         
	    	 PDDLObject domain = null;
	         //Domain domain = null;
	         
			try {
				File f = new File(args[0]);
				domain = parser.parse(f);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
			
			PDDLObject problem = null;
			//Problem problem = null;
			
			try {
				problem = parser.parse(new File(args[1]));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
			
	        PDDLObject obj = parser.link(domain, problem);
	        // Gets the error manager of the pddl parser
	        ErrorManager mgr = parser.getErrorManager();
	        // If the parser produces errors we print it and stop
	        if (mgr.contains(Message.ERROR)) {
	            mgr.print(Message.ALL);
	        } // else we print the warnings
	        else {
	            mgr.print(Message.WARNING);
	            System.out.println("\nParsing domain \"" + domain.getDomainName()
	                        + "\" done successfully ...");
	            System.out.println("Parsing problem \"" + problem.getProblemName()
	                        + "\" done successfully ...\n");
	        }
	        
	        // We want to find a plan consisting of n=2 actions.
	        CNF_plugin plugin = new CNF_plugin(obj,5);
	        
	        // Find all facts:
            plugin.initFacts();
            
            // Find all actions:
            try {
				plugin.initOps();
			} catch (InvalidExpException e) {
				e.printStackTrace();
			}
            
			// Find the goals:
            try {
            	///////////////////
				plugin.initializeGoals();
				///////////////////
			} catch (InvalidExpException e1) {
				e1.printStackTrace();
			}
            
			/*
            // Here we try the solution! (creation of the dimacs file)...
            try {
            	////////////////////////////
				plugin.create_cnf_file();
				////////////////////////////
			} catch (IOException e) {
				e.printStackTrace();
			}
			*/
			
			try {
				plugin.findSolution();
			} catch (ContradictionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (TimeoutException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			//tests
			
			System.out.println("table fait taille : "+plugin.facts_table_size);
			System.out.println("nb etats : "+plugin.num_steps_inPlan);	
			System.out.println("nb etats : "+plugin.get_numTimeSteps());
			
			plugin.showDetailsSolution();
 
	     }
	 }
}
